// Generated by CoffeeScript 1.6.3
(function() {
  var restler,
    __slice = [].slice;

  restler = require('restler');

  module.exports = (function() {
    function exports() {}

    exports.prototype.add = function(functions) {
      var args, func, i, match, name, nb_args, parts, pattern, reg, reg2, _i,
        _this = this;
      for (name in functions) {
        func = functions[name];
        nb_args = func.length;
        reg = "function \\(";
        for (i = _i = 0; 0 <= nb_args ? _i < nb_args : _i > nb_args; i = 0 <= nb_args ? ++_i : --_i) {
          if (i > 0) {
            reg += ", ";
          }
          reg += "([a-zA-Z0-9_]+)";
        }
        reg += "\\)";
        match = new RegExp(reg).exec(func.toString());
        i;
        args = match.slice(1, 1 + nb_args);
        reg2 = "return \"(.*)\"";
        match = new RegExp(reg2).exec(func.toString());
        pattern = match[1];
        parts = pattern.split(' ');
        switch (parts[0].toUpperCase()) {
          case 'GET':
            this[name] = function() {
              var arg_key, arg_value, cb, reg3, url, _args, _j, _k, _ref;
              _args = 2 <= arguments.length ? __slice.call(arguments, 0, _j = arguments.length - 1) : (_j = 0, []), cb = arguments[_j++];
              url = parts[1];
              for (i = _k = 0, _ref = _args.length; 0 <= _ref ? _k < _ref : _k > _ref; i = 0 <= _ref ? ++_k : --_k) {
                arg_value = _args[i];
                arg_key = args[i];
                reg3 = new RegExp("\\$" + arg_key, 'gi');
                url = url.replace(reg3, arg_value);
              }
              restler.get(url).on('complete', function(result) {
                if (result instanceof Error) {
                  return cb(result, void 0);
                } else {
                  return cb(void 0, result);
                }
              });
              return _this;
            };
            break;
          case 'POST':
            this[name] = function() {
              var arg_key, arg_value, cb, post_data, reg3, url, _args, _j, _k, _ref;
              _args = 2 <= arguments.length ? __slice.call(arguments, 0, _j = arguments.length - 1) : (_j = 0, []), cb = arguments[_j++];
              url = parts[3];
              post_data = {};
              for (i = _k = 0, _ref = _args.length; 0 <= _ref ? _k < _ref : _k > _ref; i = 0 <= _ref ? ++_k : --_k) {
                arg_value = _args[i];
                arg_key = args[i];
                if (arg_key === parts[1]) {
                  post_data = arg_value;
                }
                reg3 = new RegExp("\\$" + arg_key, 'gi');
                url = url.replace(reg3, arg_value);
              }
              restler.post(url, {
                data: post_data
              }).on('complete', function(result) {
                if (result instanceof Error) {
                  return cb(result, void 0);
                } else {
                  return cb(void 0, result);
                }
              });
              return _this;
            };
            break;
          default:
            throw "unsupported " + parts;
        }
      }
      return this;
    };

    return exports;

  })();

}).call(this);
